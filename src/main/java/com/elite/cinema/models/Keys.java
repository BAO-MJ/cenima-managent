/*
 * This file is generated by jOOQ.
 */
package com.elite.cinema.models;


import com.elite.cinema.models.tables.MovieInformations;
import com.elite.cinema.models.tables.Movies;
import com.elite.cinema.models.tables.ScreeningRooms;
import com.elite.cinema.models.tables.Screenings;
import com.elite.cinema.models.tables.Users;
import com.elite.cinema.models.tables.records.MovieInformationsRecord;
import com.elite.cinema.models.tables.records.MoviesRecord;
import com.elite.cinema.models.tables.records.ScreeningRoomsRecord;
import com.elite.cinema.models.tables.records.ScreeningsRecord;
import com.elite.cinema.models.tables.records.UsersRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.QOM.ForeignKeyRule;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * cinema.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<MovieInformationsRecord> KEY_MOVIE_INFORMATIONS_PRIMARY = Internal.createUniqueKey(MovieInformations.MOVIE_INFORMATIONS, DSL.name("KEY_movie_informations_PRIMARY"), new TableField[] { MovieInformations.MOVIE_INFORMATIONS.MOVIE_ID }, true);
    public static final UniqueKey<MoviesRecord> KEY_MOVIES_PRIMARY = Internal.createUniqueKey(Movies.MOVIES, DSL.name("KEY_movies_PRIMARY"), new TableField[] { Movies.MOVIES.ID }, true);
    public static final UniqueKey<ScreeningRoomsRecord> KEY_SCREENING_ROOMS_PRIMARY = Internal.createUniqueKey(ScreeningRooms.SCREENING_ROOMS, DSL.name("KEY_screening_rooms_PRIMARY"), new TableField[] { ScreeningRooms.SCREENING_ROOMS.ID }, true);
    public static final UniqueKey<ScreeningsRecord> KEY_SCREENINGS_MOVIE_ID_ROOM_ID_SCREENING_TIME = Internal.createUniqueKey(Screenings.SCREENINGS, DSL.name("KEY_screenings_movie_id_room_id_screening_time"), new TableField[] { Screenings.SCREENINGS.MOVIE_ID, Screenings.SCREENINGS.ROOM_ID, Screenings.SCREENINGS.SCREENING_TIME }, true);
    public static final UniqueKey<ScreeningsRecord> KEY_SCREENINGS_PRIMARY = Internal.createUniqueKey(Screenings.SCREENINGS, DSL.name("KEY_screenings_PRIMARY"), new TableField[] { Screenings.SCREENINGS.ID }, true);
    public static final UniqueKey<UsersRecord> KEY_USERS_PRIMARY = Internal.createUniqueKey(Users.USERS, DSL.name("KEY_users_PRIMARY"), new TableField[] { Users.USERS.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<MovieInformationsRecord, MoviesRecord> FK__MOVIES = Internal.createForeignKey(MovieInformations.MOVIE_INFORMATIONS, DSL.name("FK__movies"), new TableField[] { MovieInformations.MOVIE_INFORMATIONS.MOVIE_ID }, Keys.KEY_MOVIES_PRIMARY, new TableField[] { Movies.MOVIES.ID }, true, ForeignKeyRule.CASCADE, ForeignKeyRule.CASCADE);
    public static final ForeignKey<ScreeningsRecord, MoviesRecord> FK__SCREENING_MOVIES = Internal.createForeignKey(Screenings.SCREENINGS, DSL.name("FK__screening_movies"), new TableField[] { Screenings.SCREENINGS.MOVIE_ID }, Keys.KEY_MOVIES_PRIMARY, new TableField[] { Movies.MOVIES.ID }, true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<ScreeningsRecord, ScreeningRoomsRecord> FK__SCREENING_ROOMS = Internal.createForeignKey(Screenings.SCREENINGS, DSL.name("FK__screening_rooms"), new TableField[] { Screenings.SCREENINGS.ROOM_ID }, Keys.KEY_SCREENING_ROOMS_PRIMARY, new TableField[] { ScreeningRooms.SCREENING_ROOMS.ID }, true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION);
}
