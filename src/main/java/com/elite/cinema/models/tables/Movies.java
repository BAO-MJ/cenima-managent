/*
 * This file is generated by jOOQ.
 */
package com.elite.cinema.models.tables;


import com.elite.cinema.models.Cinema;
import com.elite.cinema.models.Keys;
import com.elite.cinema.models.tables.MovieInformations.MovieInformationsPath;
import com.elite.cinema.models.tables.Screenings.ScreeningsPath;
import com.elite.cinema.models.tables.records.MoviesRecord;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;
import org.jooq.types.UShort;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Movies extends TableImpl<MoviesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>cinema.movies</code>
     */
    public static final Movies MOVIES = new Movies();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MoviesRecord> getRecordType() {
        return MoviesRecord.class;
    }

    /**
     * The column <code>cinema.movies.id</code>.
     */
    public final TableField<MoviesRecord, ULong> ID = createField(DSL.name("id"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>cinema.movies.title</code>.
     */
    public final TableField<MoviesRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>cinema.movies.duration</code>.
     */
    public final TableField<MoviesRecord, UShort> DURATION = createField(DSL.name("duration"), SQLDataType.SMALLINTUNSIGNED.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.SMALLINTUNSIGNED)), this, "");

    private Movies(Name alias, Table<MoviesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Movies(Name alias, Table<MoviesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>cinema.movies</code> table reference
     */
    public Movies(String alias) {
        this(DSL.name(alias), MOVIES);
    }

    /**
     * Create an aliased <code>cinema.movies</code> table reference
     */
    public Movies(Name alias) {
        this(alias, MOVIES);
    }

    /**
     * Create a <code>cinema.movies</code> table reference
     */
    public Movies() {
        this(DSL.name("movies"), null);
    }

    public <O extends Record> Movies(Table<O> path, ForeignKey<O, MoviesRecord> childPath, InverseForeignKey<O, MoviesRecord> parentPath) {
        super(path, childPath, parentPath, MOVIES);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class MoviesPath extends Movies implements Path<MoviesRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> MoviesPath(Table<O> path, ForeignKey<O, MoviesRecord> childPath, InverseForeignKey<O, MoviesRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private MoviesPath(Name alias, Table<MoviesRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public MoviesPath as(String alias) {
            return new MoviesPath(DSL.name(alias), this);
        }

        @Override
        public MoviesPath as(Name alias) {
            return new MoviesPath(alias, this);
        }

        @Override
        public MoviesPath as(Table<?> alias) {
            return new MoviesPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Cinema.CINEMA;
    }

    @Override
    public Identity<MoviesRecord, ULong> getIdentity() {
        return (Identity<MoviesRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<MoviesRecord> getPrimaryKey() {
        return Keys.KEY_MOVIES_PRIMARY;
    }

    private transient MovieInformationsPath _movieInformations;

    /**
     * Get the implicit to-many join path to the
     * <code>cinema.movie_informations</code> table
     */
    public MovieInformationsPath movieInformations() {
        if (_movieInformations == null)
            _movieInformations = new MovieInformationsPath(this, null, Keys.FK__MOVIES.getInverseKey());

        return _movieInformations;
    }

    private transient ScreeningsPath _screenings;

    /**
     * Get the implicit to-many join path to the <code>cinema.screenings</code>
     * table
     */
    public ScreeningsPath screenings() {
        if (_screenings == null)
            _screenings = new ScreeningsPath(this, null, Keys.FK__SCREENING_MOVIES.getInverseKey());

        return _screenings;
    }

    @Override
    public Movies as(String alias) {
        return new Movies(DSL.name(alias), this);
    }

    @Override
    public Movies as(Name alias) {
        return new Movies(alias, this);
    }

    @Override
    public Movies as(Table<?> alias) {
        return new Movies(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Movies rename(String name) {
        return new Movies(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Movies rename(Name name) {
        return new Movies(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Movies rename(Table<?> name) {
        return new Movies(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Movies where(Condition condition) {
        return new Movies(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Movies where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Movies where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Movies where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Movies where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Movies where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Movies where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Movies where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Movies whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Movies whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
