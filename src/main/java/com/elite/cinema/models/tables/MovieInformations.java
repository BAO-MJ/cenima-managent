/*
 * This file is generated by jOOQ.
 */
package com.elite.cinema.models.tables;


import com.elite.cinema.models.Cinema;
import com.elite.cinema.models.Keys;
import com.elite.cinema.models.tables.Movies.MoviesPath;
import com.elite.cinema.models.tables.records.MovieInformationsRecord;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class MovieInformations extends TableImpl<MovieInformationsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>cinema.movie_informations</code>
     */
    public static final MovieInformations MOVIE_INFORMATIONS = new MovieInformations();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MovieInformationsRecord> getRecordType() {
        return MovieInformationsRecord.class;
    }

    /**
     * The column <code>cinema.movie_informations.movie_id</code>.
     */
    public final TableField<MovieInformationsRecord, ULong> MOVIE_ID = createField(DSL.name("movie_id"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>cinema.movie_informations.genre</code>.
     */
    public final TableField<MovieInformationsRecord, String> GENRE = createField(DSL.name("genre"), SQLDataType.VARCHAR(255).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>cinema.movie_informations.release_date</code>.
     */
    public final TableField<MovieInformationsRecord, LocalDate> RELEASE_DATE = createField(DSL.name("release_date"), SQLDataType.LOCALDATE.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.LOCALDATE)), this, "");

    /**
     * The column <code>cinema.movie_informations.director</code>.
     */
    public final TableField<MovieInformationsRecord, String> DIRECTOR = createField(DSL.name("director"), SQLDataType.VARCHAR(50).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>cinema.movie_informations.rating</code>.
     */
    public final TableField<MovieInformationsRecord, String> RATING = createField(DSL.name("rating"), SQLDataType.CLOB.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.CLOB)), this, "");

    /**
     * The column <code>cinema.movie_informations.description</code>.
     */
    public final TableField<MovieInformationsRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.CLOB)), this, "");

    private MovieInformations(Name alias, Table<MovieInformationsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private MovieInformations(Name alias, Table<MovieInformationsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>cinema.movie_informations</code> table reference
     */
    public MovieInformations(String alias) {
        this(DSL.name(alias), MOVIE_INFORMATIONS);
    }

    /**
     * Create an aliased <code>cinema.movie_informations</code> table reference
     */
    public MovieInformations(Name alias) {
        this(alias, MOVIE_INFORMATIONS);
    }

    /**
     * Create a <code>cinema.movie_informations</code> table reference
     */
    public MovieInformations() {
        this(DSL.name("movie_informations"), null);
    }

    public <O extends Record> MovieInformations(Table<O> path, ForeignKey<O, MovieInformationsRecord> childPath, InverseForeignKey<O, MovieInformationsRecord> parentPath) {
        super(path, childPath, parentPath, MOVIE_INFORMATIONS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class MovieInformationsPath extends MovieInformations implements Path<MovieInformationsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> MovieInformationsPath(Table<O> path, ForeignKey<O, MovieInformationsRecord> childPath, InverseForeignKey<O, MovieInformationsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private MovieInformationsPath(Name alias, Table<MovieInformationsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public MovieInformationsPath as(String alias) {
            return new MovieInformationsPath(DSL.name(alias), this);
        }

        @Override
        public MovieInformationsPath as(Name alias) {
            return new MovieInformationsPath(alias, this);
        }

        @Override
        public MovieInformationsPath as(Table<?> alias) {
            return new MovieInformationsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Cinema.CINEMA;
    }

    @Override
    public UniqueKey<MovieInformationsRecord> getPrimaryKey() {
        return Keys.KEY_MOVIE_INFORMATIONS_PRIMARY;
    }

    @Override
    public List<ForeignKey<MovieInformationsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK__MOVIES);
    }

    private transient MoviesPath _movies;

    /**
     * Get the implicit join path to the <code>cinema.movies</code> table.
     */
    public MoviesPath movies() {
        if (_movies == null)
            _movies = new MoviesPath(this, Keys.FK__MOVIES, null);

        return _movies;
    }

    @Override
    public MovieInformations as(String alias) {
        return new MovieInformations(DSL.name(alias), this);
    }

    @Override
    public MovieInformations as(Name alias) {
        return new MovieInformations(alias, this);
    }

    @Override
    public MovieInformations as(Table<?> alias) {
        return new MovieInformations(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public MovieInformations rename(String name) {
        return new MovieInformations(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MovieInformations rename(Name name) {
        return new MovieInformations(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public MovieInformations rename(Table<?> name) {
        return new MovieInformations(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MovieInformations where(Condition condition) {
        return new MovieInformations(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MovieInformations where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MovieInformations where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MovieInformations where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MovieInformations where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MovieInformations where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MovieInformations where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MovieInformations where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MovieInformations whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MovieInformations whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
