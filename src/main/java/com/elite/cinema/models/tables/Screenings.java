/*
 * This file is generated by jOOQ.
 */
package com.elite.cinema.models.tables;


import com.elite.cinema.models.Cinema;
import com.elite.cinema.models.Indexes;
import com.elite.cinema.models.Keys;
import com.elite.cinema.models.tables.Movies.MoviesPath;
import com.elite.cinema.models.tables.ScreeningRooms.ScreeningRoomsPath;
import com.elite.cinema.models.tables.records.ScreeningsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Screenings extends TableImpl<ScreeningsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>cinema.screenings</code>
     */
    public static final Screenings SCREENINGS = new Screenings();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ScreeningsRecord> getRecordType() {
        return ScreeningsRecord.class;
    }

    /**
     * The column <code>cinema.screenings.id</code>.
     */
    public final TableField<ScreeningsRecord, ULong> ID = createField(DSL.name("id"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>cinema.screenings.movie_id</code>.
     */
    public final TableField<ScreeningsRecord, ULong> MOVIE_ID = createField(DSL.name("movie_id"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>cinema.screenings.room_id</code>.
     */
    public final TableField<ScreeningsRecord, ULong> ROOM_ID = createField(DSL.name("room_id"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>cinema.screenings.screening_time</code>.
     */
    public final TableField<ScreeningsRecord, LocalDateTime> SCREENING_TIME = createField(DSL.name("screening_time"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    private Screenings(Name alias, Table<ScreeningsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Screenings(Name alias, Table<ScreeningsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>cinema.screenings</code> table reference
     */
    public Screenings(String alias) {
        this(DSL.name(alias), SCREENINGS);
    }

    /**
     * Create an aliased <code>cinema.screenings</code> table reference
     */
    public Screenings(Name alias) {
        this(alias, SCREENINGS);
    }

    /**
     * Create a <code>cinema.screenings</code> table reference
     */
    public Screenings() {
        this(DSL.name("screenings"), null);
    }

    public <O extends Record> Screenings(Table<O> path, ForeignKey<O, ScreeningsRecord> childPath, InverseForeignKey<O, ScreeningsRecord> parentPath) {
        super(path, childPath, parentPath, SCREENINGS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ScreeningsPath extends Screenings implements Path<ScreeningsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ScreeningsPath(Table<O> path, ForeignKey<O, ScreeningsRecord> childPath, InverseForeignKey<O, ScreeningsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ScreeningsPath(Name alias, Table<ScreeningsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ScreeningsPath as(String alias) {
            return new ScreeningsPath(DSL.name(alias), this);
        }

        @Override
        public ScreeningsPath as(Name alias) {
            return new ScreeningsPath(alias, this);
        }

        @Override
        public ScreeningsPath as(Table<?> alias) {
            return new ScreeningsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Cinema.CINEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.SCREENINGS_MOVIE_ID);
    }

    @Override
    public Identity<ScreeningsRecord, ULong> getIdentity() {
        return (Identity<ScreeningsRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<ScreeningsRecord> getPrimaryKey() {
        return Keys.KEY_SCREENINGS_PRIMARY;
    }

    @Override
    public List<UniqueKey<ScreeningsRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_SCREENINGS_MOVIE_ID_ROOM_ID_SCREENING_TIME);
    }

    @Override
    public List<ForeignKey<ScreeningsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK__SCREENING_MOVIES, Keys.FK__SCREENING_ROOMS);
    }

    private transient MoviesPath _movies;

    /**
     * Get the implicit join path to the <code>cinema.movies</code> table.
     */
    public MoviesPath movies() {
        if (_movies == null)
            _movies = new MoviesPath(this, Keys.FK__SCREENING_MOVIES, null);

        return _movies;
    }

    private transient ScreeningRoomsPath _screeningRooms;

    /**
     * Get the implicit join path to the <code>cinema.screening_rooms</code>
     * table.
     */
    public ScreeningRoomsPath screeningRooms() {
        if (_screeningRooms == null)
            _screeningRooms = new ScreeningRoomsPath(this, Keys.FK__SCREENING_ROOMS, null);

        return _screeningRooms;
    }

    @Override
    public Screenings as(String alias) {
        return new Screenings(DSL.name(alias), this);
    }

    @Override
    public Screenings as(Name alias) {
        return new Screenings(alias, this);
    }

    @Override
    public Screenings as(Table<?> alias) {
        return new Screenings(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Screenings rename(String name) {
        return new Screenings(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Screenings rename(Name name) {
        return new Screenings(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Screenings rename(Table<?> name) {
        return new Screenings(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Screenings where(Condition condition) {
        return new Screenings(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Screenings where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Screenings where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Screenings where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Screenings where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Screenings where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Screenings where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Screenings where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Screenings whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Screenings whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
